{"version":3,"sources":["components/InputField.js","App.js","index.js"],"names":["InputField","props","useState","addInputField","setaddInputField","data","id","setData","changeHandler","e","target","name","value","newData","InputGroup","className","size","Prepend","Text","Checkbox","aria-label","defaultChecked","removed","onClick","Button","variant","prevGrade","FormControl","required","type","max","min","hour","placeholder","onChange","step","grade","Append","splice","App","result","setResult","prevAvrage","setPrevAvrage","prevHours","setPrevHours","addState","setAddState","inputs","map","v","i","Row","ListGroup","Item","Jumbotron","style","textAlign","Container","Alert","Heading","Form","onSubmit","preventDefault","totalHours","totalGrades","currentGrades","currentHours","totalPrevGrades","parseInt","isFinite","Math","round","ButtonGroup","active","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a978362.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\n\n\nconst InputField = (props) =>{\n  \n  \n  const [addInputField,setaddInputField] = useState(false)\n  \n  const {data, id, setData} = props;\n  \n  const changeHandler = (e) => {\n\n    const { name, value } = e.target;\n    let newData = [ ...data ];\n    newData[id] = { ...newData[id] ,[name]: value};\n    setData( newData );\n\n      \n    }\n  const deleteHandler = () => {\n\n    let newData = [...data]\n      newData.splice(id, 1);\n  \n      setData(newData);\n      \n  }\n  const toggleChange = (e) =>{ \n    const { name } = e.target;\n    const value = !data[id].[name];\n    let newData = [ ...data ];\n    newData[id] = { ...newData[id] ,[name]: value};\n    setData( newData );\n\n      \n  \n  } \n  \nconst   addFieldHandler = () =>{\n\n\n\n    setaddInputField(!addInputField);\n    if(!addInputField) {\n    \n    \n      let newData = [ ...data ];\n      newData[id] = { ...newData[id] ,prevGrade: ''};\n      \n      \n      setData( newData );  \n    }\n    \n  }\n  \n  \n  return (\n\n\n  \n    <InputGroup className=\"mb-3\" size=\"sm\">\n\n    <InputGroup.Prepend>\n    <InputGroup.Text> ناجح راسب </InputGroup.Text>\n      <InputGroup.Checkbox aria-label=\"Checkbox for following text input\" name=\"removed\" defaultChecked={data[id]?.removed} onClick={toggleChange} />\n    </InputGroup.Prepend>\n    <InputGroup.Prepend>\n    <Button variant=\"outline-primary\" onClick={addFieldHandler}>مادة معادة </Button>\n    </InputGroup.Prepend>\n\n  \n  <FormControl required  type=\"number\" max=\"14\" min=\"1\"  value={data[id]?.hour} name=\"hour\"    placeholder=\"عدد الساعات\" onChange={ changeHandler } />\n    <FormControl required type=\"number\" max=\"100\" min=\"35\"  step=\"0.01\" value={data[id]?.grade}  name=\"grade\"  placeholder=\"العلامة المتوقعة\" onChange={ changeHandler } />\n    {addInputField &&   <FormControl required type=\"number\" max=\"100\" min=\"35\"  step=\"0.01\" value={data[id]?.prevGrade}  name=\"prevGrade\"  placeholder=\"العلامة السابقة\" onChange={ changeHandler } />  }\n\n  <InputGroup.Append>\n    <Button onClick={deleteHandler} variant=\"outline-primary\" size=\"sm\" >\n      Remove\n    </Button>\n    </InputGroup.Append>\n\n      </InputGroup>\n      \n\n\n    \n  );\n  \n  \n  \n}\n\nexport default InputField;","import React,{ useState, useEffect } from 'react';\nimport { Container, ButtonGroup, Button, Jumbotron, Alert, InputGroup, FormControl, ListGroup, Row,Form, } from 'react-bootstrap';\nimport  './App.css';\n// custom components \n\nimport InputField from './components/InputField';\n\n\nconst  App = () => {\n\n  const [data,setData] = useState([{hour: '', grade: '', prevGrade:'', removed: false}]);\n  const [result,setResult] = useState('');\n  const [prevAvrage,setPrevAvrage] = useState(0);\n  const [prevHours,setPrevHours] = useState(0);\n  const [addState,setAddState] = useState(true);\n\n  \n  const calculateHandler = (e) => {\n    e.preventDefault();\n    let currentGrades = 0;\n    let currentHours = 0;\n    let totalHours = 0;\n    let totalGrades = 0;\n    let totalPrevGrades = 0;\n    let prevGrade  = 0;\n\n    data.map((v,i) => {\n      \n      if(v.removed) return ;\n      \n      currentGrades += parseInt(v.grade) * parseInt(v.hour);\n      currentHours += parseInt(v.hour);\n      prevGrade = v.prevGrade;\n  \n      if(parseInt(prevGrade).isFinite) totalPrevGrades += currentGrades;\n    });\n    \n    totalHours = (parseInt(currentHours)+parseInt(prevHours));\n    totalGrades = (currentGrades+parseInt(prevAvrage)*parseInt(prevHours)) - totalPrevGrades;\n\n    setResult(Math.round(((totalGrades/totalHours)*100)/100));\n  }\n  \n\n  const resetHandler = () => {\n    setData([{hour: '', grade: '', prevGrade:'', removed: false}]);\n    setResult('');\n    setPrevAvrage(0);\n    setPrevHours(0);\n    setAddState(true);\n\n  }\n    \n  const addInputHandler = () => {\n    if (data.length > 7) return setAddState(false);\n    setData([...data, {hour: '', grade: '', prevGrade:'', removed: false}])\n  \n}\n\n\n\n\n\n\n  const inputs =  data.map(\n      (v,i) => {\n\n      \n      return(\n      <Row className=\"justify-content-md-center\" key={i} >\n        <ListGroup.Item>\n            <InputField\n            \n            id={i}\n            data={data}\n            setData={setData}\n\n\n          />\n       </ListGroup.Item>\n\n      </Row>  \n        \n    );\n        \n        \n        \n      }   \n      \n    );\n\n// console.log(data);\n\n  return (\n<>          \n          <Jumbotron style={{textAlign:'center'}}> \n            <h1> حساب المعدل التراكمي المتوقع </h1> \n            <br/>\n            <h3> برنامج حساب المعدل التراكمي المتوقع للطلبة </h3>\n          </Jumbotron>\n    \n          <Container >\n\n            <InputGroup className=\"mb-3\" size=\"sm\">\n              <InputGroup.Append>\n                <InputGroup.Text> الساعات المقطوعة  </InputGroup.Text>\n            \n              </InputGroup.Append>\n              \n                <FormControl type=\"number\" max=\"400\" min=\"0\" value={prevHours} name=\"hour\"   placeholder=\"prevHours\" onChange={ (e) => setPrevHours(e.target.value) } />\n                \n                <InputGroup.Append>\n                  <InputGroup.Text> المعدل الحالي </InputGroup.Text>\n              \n                </InputGroup.Append>\n                \n                \n                <FormControl type=\"number\"  max=\"100\" min=\"0\" step=\"0.01\"  value={prevAvrage}  name=\"grade\"  placeholder=\"prevAvrage\" onChange={ (e) => setPrevAvrage(e.target.value) } />\n            </InputGroup>\n            \n            \n            \n            {\n              result &&\n            \n            <Alert variant=\"primary\" style={{textAlign: 'center'}}>\n              <Alert.Heading>    حسب المعلومات المدخله من قبلك فإن المعدل التراكمي المتوقع سيكون </Alert.Heading>\n              <strong className=\"mb-0\"> {result}% </strong> \n              <div className=\"d-flex justify-content-end\">\n                <Button onClick={resetHandler} variant=\"outline-primary\">\n                  Reset\n                </Button>\n              </div>\n            </Alert>\n            \n              }\n\n\n            <Form onSubmit={calculateHandler}>\n      \n\n              <ListGroup variant=\"flush\">\n\n              \n                { inputs }\n              </ListGroup>\n              \n    \n            \n            \n            \n        \n            <div className=\"center \">\n            <ButtonGroup>\n              <Button type=\"submit\"  variant=\"primary\" size=\"sm\" active>\n              حساب\n              </Button>\n                {addState && \n                <Button onClick={addInputHandler} variant=\"secondary\" size=\"sm\" active>\n                  اضافة مادة\n                </Button>\n                }\n              </ButtonGroup>\n           </div>\n           </Form>\n           \n        </Container>\n</>\n        );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}